//Tareas A realizarse

// Tenemos que copiar las clases que ya hemos creado
// Adecuemos el codigo de la libreria al nuestro
// Generar las Nubes de Puntos a partir de los Datos y Realizar el Algoritmo SLAM entre dos pares de Imagenes
// OJO: Nos enfocamos en el mesh final. Asi que no habra mucha visualizaci√≥n


//22-Feb
Ya puedo leer los nombres de los archivos
ahora debemos crear una imagen y leer los datos con OpenCV, Generar los PointCloud

//24-Feb
Generar las Nubes de Puntos con sus correspondientes Colores. Los puntos con profundidad 0(no leidos, son ignorados)

//25-Feb
Visualizacion del Point Cloud, Solo para ir revisando como va quedando
Podriamos tambien realizar la Parte de Volume Integracion, Generacion del Mesh
Volume Integrator(Aligned Point Cloud Collection___to___3D Mesh)


NOTAAAAAAAAAAAAAAAAAAAAAAAAA
a veces el error que tenemos cuando usamos pointers es no inicializarlos como nullptr
es de lo mas tonto que me paso















// Randomly select 3 fo them, minimun for Point Adjustment SE(3)
// In this case we random shuffle and select first 3
std::vector<int> matchIndices(pixelMatch_s.size());
std::iota(matchIndices.begin(),matchIndices.end(),0);

    /** INICIO DE RANSAC **/
    // Verify that pairwise distances match!
    // the 3 combinations should be similar under a certain threshold(dunno maybe <1.0)
    // also we must verify matched pixel has depth value

    int iterations = 100; // Numero de iteraciones, propuesto por Fischler
    //Vectores para almacenar el Inlier count y las transformaciones respectivas
    std::vector<int> inlierCounts;
    std::vector<Eigen::Matrix4d> refinedTransformations;
    float threshold = 0.010f; // Este threshold puede variar pero com tenemos imagenes a 30Hz deberia ser 0

    for(int it = 0; it < iterations; it++){
	cout <<endl<< "Ransac _ Iter " << it <<endl;

	/**
	    En esta parte del codigo tenemos que escoger 3 matches de puntos que guarden cierta correspondencia
	    y que sean diferentes de cero.

	    //La diferencia a cero es necesaria por los pixeles no captados adecuadamente por el depth sensor
	    //Esto puede arreglarse de muchas formas... revisar mis notas en el paper
	**/

	std::vector<cv::Point3f> coord_sample_s(3),coord_sample_t(3); // Lo inicializamos aqui para no tener q estar creando este vector a cada rato
	bool test_passed = false;
	while(!test_passed){
	    std::random_shuffle(matchIndices.begin(),matchIndices.end());
	    // Insertamos y Aceptamos solo valores que cuenten con una profundidad adecuada
	    // Si comentamos la linea de abajo, aceptaremos valores de profundidad que tenga z = 0
	    for(int i = 0; i < 3;i++){
		coord_sample_s[i] = source.get_CVCoordFromPixel(pixelMatch_s[ matchIndices[i] ].x,pixelMatch_s[ matchIndices[i] ].y);
		coord_sample_t[i] = target.get_CVCoordFromPixel(pixelMatch_t[ matchIndices[i] ].x,pixelMatch_t[ matchIndices[i] ].y);

		if(coord_sample_s[i].z == 0 || coord_sample_t[i].z == 0 )
		    continue; // Si
	    }

	    //Confirmamos que los valores tomados esten bien
	    float dist1s = simpleEuclidean(coord_sample_s[0],coord_sample_s[1]);
	    float dist2s = simpleEuclidean(coord_sample_s[0],coord_sample_s[2]);
	    float dist3s = simpleEuclidean(coord_sample_s[1],coord_sample_s[2]);

	    float dist1t = simpleEuclidean(coord_sample_t[0],coord_sample_t[1]);
	    float dist2t = simpleEuclidean(coord_sample_t[0],coord_sample_t[2]);
	    float dist3t = simpleEuclidean(coord_sample_t[1],coord_sample_t[2]);

	    if(abs(dist1s-dist1t) < threshold &&
		    abs(dist2s-dist2t) < threshold &&
		    abs(dist3s-dist3t) < threshold){
		test_passed = true;
	    }
	}

	// A partir de este punto trabajamos solo con Eigen para agilizar los calculos
	// Una vez pasado el test Creamos un Obtenemos las muestras en Vector Eigen
	std::vector<Eigen::Vector3d> coord_s,coord_t;
	for(int i = 0; i < matches.size();i++){
	    Eigen::Vector3d tmp_s = source.get_EigenCoordFromPixel(pixelMatch_s[ matchIndices[i] ].x,pixelMatch_s[ matchIndices[i] ].y);
	    Eigen::Vector3d tmp_t = target.get_EigenCoordFromPixel(pixelMatch_t[ matchIndices[i] ].x,pixelMatch_t[ matchIndices[i] ].y);
	    if(tmp_s.z() != 0.0 && tmp_t.z() != 0.0){ // Lo valores de Z en ninguno de los pares debe ser cero. //Caso contrario no se toman en cuenta
		coord_s.push_back(tmp_s);
		coord_t.push_back(tmp_t);
	    }
	}
	cout << "Total Number of Inliers" << coord_s.size() <<endl;

	// Estimate Rotation-Translation Matrix en
	// base a los 3 primeros puntos (Los que revisamos y pasan el test)
	std::vector<Eigen::Vector3d>v_s(coord_s.begin(),coord_s.begin()+3);
	std::vector<Eigen::Vector3d>v_t(coord_t.begin(),coord_t.begin()+3);
	/** // Ayudo a verificar el funcionamento de la descomposicion SVD
	std::vector<Eigen::Vector3d>v_s;
	v_s.push_back(Eigen::Vector3d(0,0,0));
	v_s.push_back(Eigen::Vector3d(1,1,1));
	v_s.push_back(Eigen::Vector3d(2,3,4));
	std::vector<Eigen::Vector3d>v_t;
	v_t.push_back(Eigen::Vector3d(1,1,1));
	v_t.push_back(Eigen::Vector3d(2,2,2));
	v_t.push_back(Eigen::Vector3d(3,4,5));
	**/
	Eigen::Matrix4d preTransformation = QuickTransformation(v_s,v_t);

	// Count number of inliers
	int num_Inliers = 0;
	std::vector<int> InlierIndex;
	for(int i = 0; i < coord_s.size(); i++){
	    Eigen::Vector3d p = coord_s[i];
	    Eigen::Vector3d q = coord_t[i];
	    Eigen::Vector4d v = (Eigen::Vector4d(p(0),p(1),p(2),1.0)  - preTransformation * Eigen::Vector4d(q(0),q(1),q(2),1.0));
	    Eigen::Vector3d dist = Eigen::Vector3d(v(0),v(1),v(2));
	    double distance = dist.norm();
	    if(distance < 0.003){ // deberia ser 0.003, sabiendo que trabajamos en la escala de 1m
		num_Inliers++;
		InlierIndex.push_back(i);
	    }
	}

	cout << "Numero de Inliers: " << num_Inliers << endl;
	inlierCounts.push_back(num_Inliers);



	// Refinamos la Transformacion usando solo los inliers
	std::vector<Eigen::Vector3d> final_coord_s,final_coord_t;
	for(int i = 0; i < num_Inliers; i++){
	    final_coord_s.push_back(coord_s[ InlierIndex[i] ]);
	    final_coord_t.push_back(coord_t[ InlierIndex[i] ]);
	}
	Eigen::Matrix4d transformation = QuickTransformation(final_coord_s,final_coord_t);
	cout << "Transformacion Refinada:" << endl << transformation << endl;
	refinedTransformations.push_back(transformation);
    } // Fin de las iteraciones RANSAC

    //Seleccionamos la mejor transformacion(aquella con mas inliers)
    int max = 0;
    int bestIteration = 0;
    for(int i = 0; i < iterations;i++){
	if(max < inlierCounts[i]){
	    max = inlierCounts[i];
	    bestIteration = i;
	}
    }
    cout << "==========================\n";
    cout << "La mejor Iteracion fue "<< bestIteration << endl << refinedTransformations[bestIteration]<< endl;
    cout << "==========================\n";
    **/



// Codigo que verifica la funcionalidad de QuickTransformation
// Esta funcion halla la matriz minima de transformacion T tal que

			[s] = [T][t]

// CODIGO
std::vector<Eigen::Vector3d> s;
s.push_back(Eigen::Vector3d(0,0,0));s.push_back(Eigen::Vector3d(1,1,1));s.push_back(Eigen::Vector3d(2,3,4));
std::vector<Eigen::Vector3d> t;
t.push_back(Eigen::Vector3d(5,5,5));t.push_back(Eigen::Vector3d(6,6,6));t.push_back(Eigen::Vector3d(7,8,9));
std::vector<Eigen::Vector3d> u;
u.push_back(Eigen::Vector3d(6,6,6));u.push_back(Eigen::Vector3d(7,7,7));u.push_back(Eigen::Vector3d(8,9,10));
std::vector<Eigen::Vector3d> v;
v.push_back(Eigen::Vector3d(-6,-6,-6));v.push_back(Eigen::Vector3d(-7,-7,-7));v.push_back(Eigen::Vector3d(-8,-9,-10));

std::vector< std::vector<Eigen::Vector3d> > pc;
pc.push_back(s);pc.push_back(t);pc.push_back(u);pc.push_back(v);

Eigen::Matrix4d T = QuickTransformation(s,t);

cout <<"t: "<< endl << T << endl;
FOR(i,3){
    Eigen::Vector4d tmp1 = T * Eigen::Vector4d(t[i](0),t[i](1),t[i](2),1.0);
    Eigen::Vector3d tmp2 = Eigen::Vector3d(tmp1(0),tmp1(1),tmp1(2));
    //t[i] = tmp2;
    printEigenVector(tmp2);
}

Eigen::Matrix4d U = QuickTransformation(t,u);
Eigen::Matrix4d V = QuickTransformation(u,v);

cout <<"u: "<< endl << U << endl;
cout <<"v: "<< endl << V << endl;
FOR(i,3){
    Eigen::Vector4d tmp1 = T * U * V * Eigen::Vector4d(v[i](0),v[i](1),v[i](2),1.0);
    Eigen::Vector3d tmp2 = Eigen::Vector3d(tmp1(0),tmp1(1),tmp1(2));
    //t[i] = tmp2;
    printEigenVector(tmp2);
}

std::vector<Eigen::Matrix4d> transformations;
transformations.push_back(T);transformations.push_back(U);transformations.push_back(V);

for(int i = 1; i < 3; i++)
    transformations[i] = transformations[i-1] * transformations[i];

transformations.insert(transformations.begin(),Eigen::Matrix4d::Identity());

FOR(i,pc.size()){
    cout << "transfor " << i << " :"<< endl << transformations[i] << endl;
    FOR(j,3){
	Eigen::Vector4d tmp1 = transformations[i] * Eigen::Vector4d(pc[i][j](0),pc[i][j](1),pc[i][j](2),1.0);
	Eigen::Vector3d tmp2 = Eigen::Vector3d(tmp1(0),tmp1(1),tmp1(2));
	//t[i] = tmp2;
	printEigenVector(tmp2);
    }
}


